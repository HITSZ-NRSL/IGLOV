# Publish all joint states -----------------------------------
joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 20  

plt_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"
  left_wheel: ['left_joint1', 'left_joint2','left_joint3', 'left_joint4']
  right_wheel: ['right_joint1', 'right_joint2','right_joint3', 'right_joint4']
  publish_cmd: true
  publish_rate: 50
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  cmd_vel_timeout: 0.25
  velocity_rolling_window_size: 2
  # Base frame_id
  base_frame_id: base_link

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: false

  # Husky hardware provides wheel velocities
  estimate_velocity_from_position: false

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 0.55 # default: 1.0
  wheel_radius_multiplier    : 0.09 # default: 1.0

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 1.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 3.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 2.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 6.0   # rad/s^2

joint10_velocity_controller:
  type: velocity_controllers/JointVelocityController
  joint: gimbal_p_joint
  pid: {p: 1 , i: 0.01, d: 1.0, i_clamp_max: 1.0}

joint11_velocity_controller:
  type: velocity_controllers/JointVelocityController
  joint: gimbal_y_joint
  pid: {p: 1 , i: 0.01, d: 1.0, i_clamp_max: 1.0}
